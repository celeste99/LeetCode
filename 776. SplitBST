1  SplitBST (Leetcode 776)
Given a Binary Search Tree (BST) with root node root, and a target value V, 
split the tree into two subtrees where one subtree has nodes that are all 
smaller or equal to the target value, while the other subtree has all nodes 
that are greater than the target value.  It's not necessarily the case 
that the tree contains a node with value V.


public TreeNode[] splitBST(TreeNode root, int V) {
   if (root == null) {
   	return new TreeNode[]{null, null};
	  }
	  if (root.val == V) {
    	TreeNode right = root.right;
    	root.right = null;
    	return new TreeNode[]{root, right};
	  } else if (root.val > V) {
    	    TreeNode[] nodes = splitBST(root.left, V);
    	    TreeNode left = nodes[0];
    	    TreeNode right = nodes[1];
    	    root.left = right;
    	    return new TreeNode[]{left,root};
	  } else {
    	    TreeNode[] nodes = splitBST(root.right, V);
    	    TreeNode left = nodes[0];
    	    TreeNode right = nodes[1];
    	    root.right=left;
    	    return new TreeNode[]{root, right};
	  }
}