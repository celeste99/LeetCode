/*
Imagine ploting a histogram where y-axis the # of citation for each paper
h -index is the largest square length in the histogram
we are searching from right to left and the search space is [1, citations.length]
becasuse the result of wether an h value is valid is like this:

index:          0 1 2 3 4
value:          0 3 3 5 6
isValid:        F F T T T
h-index:        X X 3 2 1

the isValid array is formed with several false followed by several trues, and the max h-index is shows up when we find the first true in isValid array, hence we can apply binary search application

*/
class Solution {
    public int hIndex(int[] citations) {        
        int n = citations.length, left = 0, right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (citations[mid] >= n - mid) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return n - left;
    }
}


class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        for (int i = 0; i < n; i++) {
            if (citations[i] >= n - i) { // citation[i-1] < n - i + 1 <= n - i
                return n - i;
            } 
        }
        return 0;
    }
}

class Solution {
    public int hIndex(int[] citations) {        
        int n = citations.length, left = 0, right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (citations[mid] == n - mid) { // must be max h coz: 
                // c[mid - 1] <= n - mid < n - mid + 1
                return n - mid;
            } else if (citations[mid] > n - mid) {
                // c[mid + 1] > n - mid > n - mid - 1
                // search left
                right = mid;
            } else { 
                // c[mid] < n - mid -> c[mid - 1] < n - mid < n - mid + 1
                // search right
                left = mid + 1;
            }
        }
        // 一定存在 index i，使得 c[i] >= n - i
        return n - left;
    }
}


