/*
we can split it in index i --> when all the elment to the left of index i are exactly the same as 
the left elements of index i (both value and number) in the sorted array

From the property of the sorted array, we can get that the largest value in left side is <= minimum value in the right side --> same property is applied to the original array

--> we get a chuck when leftMax[i] <= rightMin[i + 1]

use a extra array to store rightMin, a value for leftMax, scan the whole array from left to right, 
maintain a chunckNum, each time leftMax[i] <= rightMin[i], we do chunckNum++

*/
class Solution {
    public int maxChunksToSorted(int[] arr) {
        int res = 1, n = arr.length;
        
        int[] rightMin = new int[n];
        rightMin[n - 1] = arr[n - 1];
        for (int i = rightMin.length - 2; i >= 0; i--) {
            rightMin[i] = Math.min(rightMin[i + 1], arr[i]);
        }
        
        int leftMax = arr[0];
        
        
        for (int i = 0; i < n - 1; i++) { // skip the last element coz it must can cut
            leftMax = Math.max(leftMax, arr[i]);
            if (leftMax <= rightMin[i + 1]) {
                res++;
            }
        }
        return res;
    }
}