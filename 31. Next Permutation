class Solution {
    // Time:
    // Space: O(1)
    public void nextPermutation(int[] nums) {
        if (nums == null || nums.length <= 1) {
            return;
        }
        int i = nums.length - 1;
        for (; i > 0; i--) {
            if (nums[i - 1] < nums[i]) { // find first decresing element
                int tmp = findSmallestLargerIndex(nums, i, nums.length - 1, nums[i - 1]);
                swap(nums, i - 1, tmp);
                break;
            }
        }
        reverse(nums, i, nums.length - 1); // not possible
    }
    private int findSmallestLargerIndex(int[] nums, int left, int right, int target) {
        while (left < right - 1) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                right = mid - 1;
            } else {
                left = mid;
            }
        }
        return nums[right] > target ? right : left;
    }
    private void reverse(int[] nums, int left, int right) {
        while (left < right) {
            swap(nums, left++, right--);
        }
    }
    private void swap(int[] nums, int left, int right) {
        int tmp = nums[left];
        nums[left] = nums[right];
        nums[right] = tmp;
    }
}