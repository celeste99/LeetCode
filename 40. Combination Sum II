class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        dfs(candidates, 0, 0, target, new ArrayList<Integer>(), res);
        return res;
    }
    public void dfs(int[] candidates, int index, int curSum, int target, List<Integer> sol, 
                    List<List<Integer>> res) {
        // base case
        if (curSum == target) {
            res.add(new ArrayList<>(sol));
            return;
        }             
        if (curSum > target || index == candidates.length) {
            return;
        }
        
        for (int i = index; i < candidates.length; i++) {
            if (i == index || candidates[i] != candidates[i - 1]) {
                sol.add(candidates[i]);
                dfs(candidates, i + 1, curSum + candidates[i], target, sol, res);
                sol.remove(sol.size() - 1);
            }
        }
    }
}