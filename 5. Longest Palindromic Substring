// Time: O(n^2)
// Space: O(1)
class Solution {
    public String longestPalindrome(String s) {
        if (s.length() < 2) {
            return s; // should clarify this assumption
        }
        char[] a = s.toCharArray();
        int start = 0, maxLength = 1;
        for (int f = 1; f < a.length; f++) {
            if (a[f] == a[f - 1]) {
                int tmp = expandPalindrome(a, f - 1, f);
                if (tmp > maxLength) {
                    maxLength = tmp;
                    start = f - tmp / 2; // 1 2 3 4(f) 5 6
                }
            }
            if (f >= 2 && a[f] == a[f - 2]) {
                int tmp = expandPalindrome(a, f - 2, f);
                if (tmp > maxLength) {
                    maxLength = tmp;
                    start = f - tmp / 2 - 1; // 1 2 3 4 5(f) 6 7
                }
            }
        }
        return maxLength > 1 ? new String(a, start, maxLength) : new String(a, 0, 1); // notice the corner case!
    }
    private int expandPalindrome(char[] a, int left, int right) {
        while (left >= 0 && right < a.length && a[left] == a[right]) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}