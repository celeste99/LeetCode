/**
 * public class GraphNode { public int key; public List<GraphNode> neighbors;
 * public GraphNode(int key) { this.key = key; this.neighbors = new
 * ArrayList<GraphNode>(); } }
 */
public class BFS {
	public boolean isBipartite(List<GraphNode> graph) {
		HashMap<GraphNode, Integer> visited = new HashMap<>();
		// 循环是为了对每个不连通的graph都能做验证
		// 对每一个graph，只有会第一个node进入private函数的while主循环，其它node都会在第一个判断返回true
		for (GraphNode node : graph) {
			if (!BFS(node, visited)) {
				return false;
			}
		}
		return true;
	}

	// 对一个连通的graph做验证，从任意一个node进入都可以
	private boolean BFS(GraphNode node, HashMap<GraphNode, Integer> visited) {
		if (visited.containsKey(node)) {
			return true;
		}
		visited.put(node, 0);
		Queue<GraphNode> queue = new ArrayDeque<>();
		queue.offer(node);
		while (!queue.isEmpty()) {
			GraphNode cur = queue.poll();
			int curGroup = visited.get(cur);
			int neiGroup = curGroup == 0 ? 1 : 0;
			for (GraphNode nei : cur.neighbors) {
				if (!visited.containsKey(nei)) {
					queue.offer(nei);
					visited.put(nei, neiGroup);
				} else if (visited.get(nei) != neiGroup) {
					return false;
				}
			}
		}
		return true;
	}
}
