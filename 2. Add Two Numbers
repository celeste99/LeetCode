// Time: O(l) l is the length of Longer list between l1 and l2
// Space: O(1)
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // dummuHead.next represents the first node that should be returned
        ListNode dummyHead = new ListNode(0);
        // cur represents the last node that should be returned
        ListNode p = l1, q = l2, cur = dummyHead;
        int carry = 0;
        while (p != null || q != null) {
            int x = (p == null) ? 0 : p.val;
            int y = (q == null) ? 0 : q.val;
            int sum = x + y + carry;
            carry = sum / 10;
            cur.next = new ListNode(sum % 10);
            cur = cur.next;
            p = (p == null) ? p : p.next;
            q = (q == null) ? q : q.next;
        }
        if (carry != 0) {
            cur.next = new ListNode(carry);
        }
        return dummyHead.next;
    }
}