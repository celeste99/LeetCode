// S1: 2遍DFS
// S2: 2遍KBFS
class Solution {
    int[][]dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        List<List<Integer>> res = new ArrayList<>();
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return res;
        }////
        int m = matrix.length;
        int n = matrix[0].length
        int[][] P = new int[m][n]; // 0 -> not visited; 1 -> can flow; -1 -> can't flow
        int[][] A = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (P[i][j] == 0) {
                    dfsP(matrix, P, i, j);
                }
                if (A[i][j] == 0) {
                    dfsA(matrix, A, i, j);
                }
            }
        }
        // post-process
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (P[i][j] == 1 && A[i][j] == 1) {
                    res.add(Arrays.asList(i, j));
                }
            }
        }
        return res;
    }
}