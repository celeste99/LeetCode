class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<int[]> res = new ArrayList<>();
        int[] sol = new int[candidates.length];
        dfs(candidates, 0, target, sol, res);
        
        List<List<Integer>> com = new ArrayList<>();
        for (int[] r : res) {
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < r.length; i++) {
                while (r[i] > 0) {
                    list.add(candidates[i]);
                    r[i]--;
                }
            }
            com.add(list);
        }
        return com;
    }
    private void dfs(int[] candidates, int index, int target, 
                     int[] sol, List<int[]> res) {
        // base case
        if (index == 0) {
            if (target % candidates[index] == 0) {
                sol[index] = target / candidates[index];
                res.add(sol);
            }
            return;
        }
        
        for (int i = 0; i <= target / candidates[index]; i++) {
            sol[index] = i;
            dfs(candidates, index - 1, target - candidates[index] * i, sol, res);
        }
    }
}/