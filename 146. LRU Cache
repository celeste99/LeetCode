class LRUCache {
/* 
There are 4 operations we may encounter:
   1. get --> search() 
   2. set --> search() + put()      already in
   3. append --> search() + insert()      not already in
   4. remove --> findLeastRecentlyUsed() + delete()  before doing insert and we find full
To satisify all the 4 operations in O(1) time: 
1 and 2 indicate a Map structure to store [key, val] pairs, 
3 indicates a order to maintain for each pair we inserted, maybe a List; 
And to make 4 O(1) time, we should use a DLinkedList for its O(1) delete operation; 

After doing all this analysis, the data structure we are gonna use is：
A HashMap that contains [key, ref_to_a_DLinkedNode];
A DoubllyLinkedList which we stores [key, val] pair in each DListNode;
A head/tail reference for reference of  oldest and newest
*/ 
    static class DListNode {
        int key;
        int val;
        DListNode prev;
        DListNode next;      
        DListNode(int key, int val) {
            this.key = key;
            this.val = val;
        }
    }
    
    private final int capacity;
    private Map<Integer, DListNode> map;
    private DListNode head;
    private DListNode tail;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;        
        this.map = new HashMap<Integer, DListNode>();
    }
    
    public int get(int key) {
        DListNode node = map.get(key);
        if (node == null) {
            return -1;
        } else {
            remove(node);
            append(node);
            return node.val;
        }
        
    }
    
    public void put(int key, int value) {
        DListNode node = map.get(key);
        if (node != null) {
            remove(node);
            node.val = value;
        } else {
            if (map.size() >= capacity) {
                remove(head);
            }
            node = new DListNode(key, value);     
        }
        append(node);
    }
    
    private void remove(DListNode node) {
        map.remove(node.key);
        /*if (node.prev != null && node.next != null) {
            node.prev.next = node.next;
            node.next.prev = node.prev;
        } else if (node.prev == null) {
            head = head.next;
            node.next.prev = null;
        } else { 
            tail = tail.prev;
            node.prev.next = null;
        }*/
        if (node.prev != null) {
            node.prev.next = node.next;
        }
        if (node.next != null) {
            node.next.prev = node.prev;
        }
        if (node == head) {
            head = head.next;
        }
        if (node == tail) {
            tail = tail.prev;
        }
        node.prev = node.next = null;
    }
// we will always have size < capacity when we call append() function    
    private void append(DListNode node) {
        map.put(node.key, node);
        if (tail == null) { // map.size() == 0进不去，因为此时size为1
            head = tail = node;
        } else {
            tail.next = node;
            node.prev = tail;
            tail = node;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */