class Solution {
    public int rectangleArea(int[][] rectangles) {
        int mod = (int)Math.pow(10, 9) + 7;
        long res = 0;
        
        // construct a recList with no overlap
        List<int[]> recList = new ArrayList<>();
        for (int[] rec : rectangles) {
            addRec(recList, rec, 0);
        }
        
        for (int[] rec :  recList) {
            res += (long)(rec[2] - rec[0]) * (long)(rec[3] - rec[1]) % mod;
        }
        
        return (int)(res % mod);
    }
    
    private void addRec(List<int[]> recList, int[] rec, int level) {
        if (level == recList.size()) {
            recList.add(rec);
            return;
        }
        
        int[] r = recList.get(level);
        
        // no overlap with cur rect
        if (rec[2] <= r[0] || rec[3] <= r[1] || rec[0] >= r[2] || rec[1] >= r[3]) {
            addRec(recList, rec, level + 1);
            return;
        }
        
        if (rec[0] < r[0]) {
            addRec(recList, new int[]{rec[0], rec[1], r[0], rec[3]}, level + 1);
        }
        if (rec[2] > r[2]) {
            addRec(recList, new int[]{r[2], rec[1], rec[2], rec[3]}, level + 1);
        }
        if (rec[1] < r[1]) {
            addRec(recList, new int[]{Math.max(rec[0], r[0]), rec[1], Math.min(rec[2], r[2]), r[1]}, level + 1);
        }
        if (rec[3] > r[3]) {
            addRec(recList, new int[]{Math.max(rec[0], r[0]), r[3], Math.min(rec[2], r[2]), rec[3]}, level + 1);
        }
    }
}