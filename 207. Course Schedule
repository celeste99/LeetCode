class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        for (int[] pre : prerequisites) {
            indegree[pre[0]]++;
        }
    // Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        int sum = 0;
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
                sum++;
            }
        }
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (int[] pre : prerequisites) {
                if (pre[1] == cur) {
                    indegree[pre[0]]--;
                    if (indegree[pre[0]] == 0) {
                        queue.offer(pre[0]);
                        sum++;                      
                    }
                }
            }
        }
        return sum == numCourses;
    }
}