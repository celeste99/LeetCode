class Solution {
    public int minArea(char[][] image, int x, int y) {
        if (image == null || image.length == 0 || image[0].length == 0) {
            return 0;
        }
        int m = image.length, n = image[0].length;
        int left = searchCol(image, 0, y, 0, m, true);
        int right = searchCol(image, y + 1, n, 0, m, false);
        int top = searchRow(image, 0, x, left, right, true);
        int bottom = searchRow(image, x + 1, m, left, right, false);
        return (right - left) * (bottom - top);
    }
    public int searchCol(char[][] image, int i, int j, int top, int bottom, boolean opt) {
        while (i != j) {
            int k = top, mid = i + (j - i) / 2;
            while (k < bottom && image[k][mid] == '0') {
                k++;
            }
            if (k < bottom == opt) {
                j = mid;
            } else {
                i = mid + 1;
            }
        }
        return i;
    }
    public int searchRow(char[][] image, int i, int j, int left, int right, boolean opt) {
        while (i != j) {
            int k = left, mid = i + (j - i) / 2;
            while (k < right && image[mid][k] == '0') {
                k++;
            }
            if (k < right == opt) {
                j = mid;
            } else {
                i = mid + 1;
            }
        }
        return i;
    }
}