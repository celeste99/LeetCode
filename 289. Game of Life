class Solution {
    public void gameOfLife(int[][] board) {
        List<int[]> changes = new ArrayList<>();
        int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {1, -1}, {1, 0}, {1, 1}, {0, -1}, {0, 1}};
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (needChange(board, i, j, dirs)) {
                    changes.add(new int[] {i, j});
                }
            }
        }
        for (int[] change : changes) {
            board[change[0]][change[1]] = Math.abs(board[change[0]][change[1]] - 1);
        }
    }
    private boolean needChange(int[][] board, int i, int j, int[][] dirs) {
        // determin the # of live neighbors
        // primitive type arrays can not use iterator
        int nums = 0;
        for (int k = 0; k < dirs.length; k++) {
            int row = i + dirs[k][0];
            int col = j + dirs[k][1];
            if (row >= 0 && row < board.length && col >= 0 && col < board[0].length 
                && board[row][col] == 1) {
                nums++;
            }
        }
        return (board[i][j] == 1 && (nums < 2 || nums > 3)) || (board[i][j] == 0 && nums == 3);
    }
}