// 1. This is a graph problem
// 2. the nodes and edges are reprensnted in the question
// 3. this is a graph treverse problem
// 4. we can use dfs to traverse all the node in the graph, and we will mark the node as visited to make sure each node is visited only once. while traversing the graph, we will set flag on each node and check whether its neighbor has the opposite flag or not.
// Time: O(|V|+|E|)
// Space: O(|V|) call stack   <node, flag> map
class Solution {
    public boolean isBipartite(int[][] graph) {
        Map<Integer, Boolean> visited = new HashMap<>();
        for (int i = 0; i < graph.length; i++) {
            if (!visited(i) && !dfs(graph, visited, i, true)) {
                return false;
            }
        }
        return true;
    }
    private boolean dfs(int[][] graph, Set<Integer> visited, int node, boolean flag) {
        if (visited.containsKey(node)) {  // base case
            return visited.get == flag;
        }
        visited.put(node, flag);
        for (int nei : graph[node]) {
            if (!dfs(graph, visited, nei, !flag)) {
                return false;
            }
        }
        return true;
    }
}