/*
1. Sort the array first
2. on each level in our recursion tree, we decide to choose a index or not, 
if we didn't choose one, than we should not choose the same value in following recursion

*/
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        Arrays.sort(nums);
        List<Integer> sub = new ArrayList<>();
        dfs(nums, sub, 0, res);
        return res;
    }
    private void dfs(int[] nums, List<Integer> sub, int index, List<List<Integer>> res) {
        // base case
        if (index == nums.length) {
            res.add(new ArrayList<>(sub));
            return;
        }
        // add num on the level
        sub.add(nums[index]);
        dfs(nums, sub, index + 1, res);
        sub.remove(sub.size() - 1);
        // not add, need to find first diff level
        while (index < nums.length - 1 && nums[index + 1] == nums[index]) {
            index++;
        }
        dfs(nums, sub, index + 1, res);
    }
}