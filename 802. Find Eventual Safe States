/*
1. DFS 2 - find circle
for each node, do DFS2 to check if there is any circle exist in a path starting from this node
! duplicate calculation

2. when doing dfs, we mark all the node in "circle path" as visited, so each node will visit only once

3. Reverse edge
using a queue, remove edge


Time: O(|V| + |E|)
Space: O(|V|)
*/
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> res = new ArrayList<>();
        if (graph == null || graph.length == 0) {
            return res;
        }
        boolean[] visiting = new boolean[graph.length];
        boolean[] visited = new boolean[graph.length]; // true means this node is eventually safe
        
        // check each node
        for (int i = 0; i < graph.length; i++) {
            dfs(graph, i, visiting, visited); // have no circle -> eventually safe
        }
        
        // post processing
        for (int j = 0; j < visiting.length; j++) {
            if (!visiting[j]) {
                res.add(j);
            }
        }
        return res;
    }
    private boolean dfs(int[][] graph, int node, boolean[] visiting, boolean[] visited) {
        // base case
        if (//graph[node].length == 0 || 不用写，下面for loop会判断，并且visited要改
            visited[node]) {
            return true; // find stop point or must have stop point for any choice
        }
        if (visiting[node]) {
            return false; // find circle
        }
        
        visiting[node] = true;
        for (int nei : graph[node]) {
            if (!dfs(graph, nei, visiting, visited)) {
                return false; // no backtracking
            }
        }
        visiting[node] = false; // backtracking
        visited[node] = true; // make sure visited only once
        return true;
    }
}