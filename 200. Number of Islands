// Time: O(n) n is the total element in the matrix; Each element will processed only once
// Sapce: O(n) call stack - O(length+width); visited matrix - O(n)
/*for (node : matrix) {            
        if (node == 1 && !node.visted()) {
            dfs() this node until we meet 0 or border + mark  visited node;
            count++;
        }   
}*/
// if it's not ok making changes to the input array, add a boolean matrix to mark
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int res = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, visited, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    private void dfs(char[][] grid, int i, int j) {
        if (grid[i][j] != '0' || i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
            return;
        }
        grid[i][j] = '0';
        // for its 4 neighbors, if (nei == 1 && !nei.visited) --> dfs(nei);
        dfs(grid, i - 1, j);
        dfs(grid, i + 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i, j + 1);
    }
}
