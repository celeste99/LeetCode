/*
Tree properties: starting form each node, we can reach any other node without cycle

1. no cycle
do dfs from any node to check if there is any node visited more than once
mark node visited if there is no cycle starting from this node
2. connected
check the number of visited equals to n

*/
class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (edges.length != n - 1) {
            return false;
        }
        if (edges == null || edges.length == 0) {
            return true;
        }
        // build graph
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new HashSet<Integer>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        Set<Integer> visited = new HashSet<>(); // used for checking connected graph and checking cycle
        return !dfs(graph, 0, null, visited) && (visited.size() == n);
    }
    private boolean dfs(Map<Integer, Set<Integer>> graph, int node, Integer parent, Set<Integer> visited) {
        // base case
        if (visited.contains(node)) { // has cycle
            return true; // only way of return true
        }        
        visited.add(node); // mark the # of node can be reached from root    
        for (int nei : graph.get(node)) {
            if (nei != parent && dfs(graph, nei, node, visited)) {
                return true;
            }
        }
        return false;     
    }
}