/*
1. for each 'O' on the border, 
run dfs to traverse all the reachable node only once, and mark it as unchangable
change all unmarked 'O's into 'X's
time: O(n) Space: O(1)
2. for each 'O' in the graph
run dfs to tarverse all the reachable '0's once, and mark them if no border connected
time: O(n) Space: O(n)
*/
/////
class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        // int[][] visited = new int[board.length][board[0].length];
        // form border 'O's, travers all the 'O's that are connected to it, and mark it '*'
        for (int j = 0; j < board[0].length; j++) {
            if (board[0][j] == 'O') {
                dfs(board, 0, j);
            }
            if (board[board.length - 1][j] == 'O') {
                dfs(board, board.length - 1, j);
            }
        }
        for (int i = 1; i < board.length - 1; i++) {
            if (board[i][0] == 'O') {
                dfs(board, i, 0);
            }
            if (board[i][board[0].length - 1] == 'O') {
                dfs(board, i, board[0].length - 1);
            }
        }
        // post processing
        for (int x = 0; x < board.length; x++) {
            for (int y = 0; y < board[0].length; y++) {
                if (board[x][y] != 'X') {
                    board[x][y] = (board[x][y] == 'O') ? 'X' : 'O';
                }        
            }
        }
    }
    private void dfs(char[][] board, int i, int j) {
        // base case
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] == 'X' 
            || board[i][j] == '*') { // already visited
            return;
        }
        board[i][j] = '*'; // mark visited
        dfs(board, i - 1, j);
        dfs(board, i + 1, j);
        dfs(board, i, j - 1);
        dfs(board, i, j + 1);
    }
}