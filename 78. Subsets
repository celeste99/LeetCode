/*
dfs back tracking to find all combination of integer
There are 2 ways to construct all subset:
1. for each num, we dicide it is in the current subset or not
when all the element are determined, we have a solution and can add it to result
2. append a num to current subset to conduct a larger sized subset, picked from right side
*/
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null) {
            return res;
        }
        List<Integer> sub = new ArrayList<>();
        dfs(nums, sub, 0, res);
        return res;
    }
    private void dfs(int[] nums, List<Integer> sub, int index, List<List<Integer>> res) {
        // base case
        if (index == nums.length) {
            res.add(new ArrayList<Integer>(sub));
            return;
        }
        dfs(nums, sub, index + 1, res);
        sub.add(nums[index]);
        dfs(nums, sub, index + 1, res);
        sub.remove(sub.size() - 1);
    }
}